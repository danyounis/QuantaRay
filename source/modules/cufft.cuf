! NVIDIA CUDA FFT Interface (cufft.cuf)

module cufft

    integer, parameter, public :: CUFFT_FORWARD = -1
    integer, parameter, public :: CUFFT_INVERSE =  1
    integer, parameter, public :: CUFFT_R2C = Z'2a' ! Real to Complex (interleaved)
    integer, parameter, public :: CUFFT_C2R = Z'2c' ! Complex (interleaved) to Real
    integer, parameter, public :: CUFFT_C2C = Z'29' ! Complex to Complex, interleaved
    integer, parameter, public :: CUFFT_D2Z = Z'6a' ! Double to Double-Complex
    integer, parameter, public :: CUFFT_Z2D = Z'6c' ! Double-Complex to Double
    integer, parameter, public :: CUFFT_Z2Z = Z'69' ! Double-Complex to Double-Complex

    interface cufftDestroy
        subroutine cufftDestroy(plan) bind(C,name='cufftDestroy')
            use iso_c_binding
            type(c_ptr), value :: plan
        end subroutine cufftDestroy
    end interface cufftDestroy

    interface cufftSetStream
        subroutine cufftSetStream(plan, stream) bind(C,name='cufftSetStream')
            use iso_c_binding
            use cudafor
            type(c_ptr), value :: plan
            integer(cuda_stream_kind), value :: stream
        end subroutine cufftSetStream
    end interface cufftSetStream

    interface cufftExec
        subroutine cufftExecR2C(plan, idata, odata) bind(C,name='cufftExecR2C')
            use iso_c_binding
            use prec
            type(c_ptr), value :: plan
            integer(c_int), value :: direction
            !pgi$ ignore_tr idata,odata
            real(sngl_t), device :: idata(*)
            complex(sngl_t), device :: odata(*)
        end subroutine cufftExecR2C

        subroutine cufftExecC2C(plan, idata, odata, direction) bind(C,name='cufftExecC2C')
            use iso_c_binding
            use prec
            type(c_ptr), value :: plan
            integer(c_int), value :: direction
            !pgi$ ignore_tr idata,odata
            complex(sngl_t), device :: idata(*), odata(*)
        end subroutine cufftExecC2C

        subroutine cufftExecD2Z(plan, idata, odata) bind(C,name='cufftExecD2Z')
            use iso_c_binding
            use prec
            type(c_ptr), value :: plan
            integer(c_int), value :: direction
            !pgi$ ignore_tr idata,odata
            real(dble_t), device :: idata(*)
            complex(dble_t), device :: odata(*)
        end subroutine cufftExecD2Z

        subroutine cufftExecZ2Z(plan, idata, odata, direction) bind(C,name='cufftExecZ2Z')
            use iso_c_binding
            use prec
            type(c_ptr), value :: plan
            integer(c_int), value :: direction
            !pgi$ ignore_tr idata,odata
            complex(dble_t), device :: idata(*), odata(*)
        end subroutine cufftExecZ2Z
    end interface cufftExec

    interface cufftPlan1d
        subroutine cufftPlan1d(plan, nx, type, batch) bind(C,name='cufftPlan1d')
            use iso_c_binding
            type(c_ptr) :: plan
            integer(c_int), value :: nx, type, batch
        end subroutine cufftPlan1d
    end interface cufftPlan1d

    interface cufftPlan2d
        module procedure cufftPlan2dS
    end interface cufftPlan2d

    interface cufftPlan2dC
        subroutine cufftPlan2d(plan, nx, ny, type) bind(C,name='cufftPlan2d')
            use iso_c_binding
            type(c_ptr) :: plan
            integer(c_int), value:: nx, ny, type
        end subroutine cufftPlan2d
    end interface cufftPlan2dC

contains

    subroutine cufftPlan2dS(plan, nx, ny, type)
        use iso_c_binding
        type(c_ptr) :: plan
        integer(c_int), value :: nx, ny, type
        call cufftPlan2dC(plan, ny, nx, type)
    end subroutine cufftPlan2dS

end module cufft
